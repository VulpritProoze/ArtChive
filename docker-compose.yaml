services:
  # db:
  #   image: postgres:17-alpine
  #   restart: always
  #   env_file: .env
  #   ports:
  #     - "5432:5432"
  #   # mount dbdata to a named volume
  #   volumes:
  #     - dbdata:/var/lib/postgresql/data
  #   environment:
  #     - TZ=Asia/Shanghai
  #     - PGTZ=Asia/Shanghai
  #     - POSTGRES_INITDB_ARGS=--data-checksums --locale=en_US.UTF_8
  #     - POSTGRES_DB=artchive_1
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d artchive_1"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  
  # redis:
  #   image: redis:alpine
  #   ports:
  #     - "6379:6379"
  #   environment:
  #     - TZ=Asia/Shanghai
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  frontend:
    build:
      dockerfile: frontend/Dockerfile
      context: .
    env_file: .env
    ports: 
      - "5173:5173"
    environment:
      - TZ=Asia/Shanghai
    volumes: 
      - ./frontend:/app # bind mounting to enable live reload
      - /app/node_modules # mount node_modules to an anonymous volume so that the volume above doesn't replace container node_modules
  
  backend:
    build:
      dockerfile: backend/Dockerfile
      context: .
    env_file: .env
    ports: 
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /usr/local/lib/python3.12/site-packages # mount installed packages to a named volume so that pip install does not freak up!
    environment:
      - TZ=Asia/Shanghai
    # depends_on:
    #   redis:
    #     condition: service_healthy
    #   db:
    #     condition: service_healthy
    # restart: on-failure:3

# volumes:
#   dbdata:
  
# docker-compose up -d 
# docker-compose --env-file ./backend/.env up
# docker-compose build --no-cache --parallel
# docker-compose down -v (removes all mounted volumes) then docker-compose up --build